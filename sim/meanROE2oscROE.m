function [d_a_osc, d_lambda_osc, d_e_x_osc, d_e_y_osc, d_i_x_osc, d_i_y_osc] = ...
    meanROE2oscROE(a_o, e_x_o, e_y_o, i_o, RAAN_o, u_o, ...
                   d_a_mean, d_lambda_mean, d_e_x_mean, d_e_y_mean, d_i_x_mean, d_i_y_mean, J2_flag)
% Converts mean ROE to osculating ROE using mean2osc and element transformations
% Inputs:
%   a_o, e_x_o, ..., u_o: chief mean quasi-nonsingular elements [deg, km]
%   d_*_mean: deputy relative mean ROEs [m]
%   J2_flag: 1 to apply J2 corrections

    % Convert deputy mean elements from ROE + chief OE
    [a_t_mean,e_x_t_mean,e_y_t_mean,i_t_mean,RAAN_t_mean,u_t_mean] = ...
        ROE2quasi_nonsing(a_o, e_x_o, e_y_o, i_o, RAAN_o, u_o, ...
                           d_a_mean, d_lambda_mean, d_e_x_mean, d_e_y_mean, d_i_x_mean, d_i_y_mean);

    % Convert to classical OE
    [a_t_mean, e_t_mean, i_t_mean, RAAN_t_mean, w_t_mean, ~, M_t_mean] = ...
        quasi_nonsing2OE(a_t_mean, e_x_t_mean, e_y_t_mean, i_t_mean, RAAN_t_mean, u_t_mean);

    % Build classical mean OE vector in required format for mean2osc
    mean_elem = [a_t_mean*1e3; ...            % km -> m
                 sqrt(e_x_t_mean^2 + e_y_t_mean^2); ...
                 deg2rad(i_t_mean); ...
                 deg2rad(RAAN_t_mean); ...
                 deg2rad(w_t_mean); ...
                 deg2rad(M_t_mean)];

    % Convert to osculating OE
    osc_elem = mean2osc(mean_elem, J2_flag);

    % Convert back to quasi-nonsingular
    [a_t_osc, e_x_t_osc, e_y_t_osc, i_t_osc, RAAN_t_osc, u_t_osc] = ...
        OE2quasi_nonsing(osc_elem(1)/1e3, osc_elem(2), ...
                        rad2deg(osc_elem(3)), rad2deg(osc_elem(4)), ...
                        rad2deg(osc_elem(5)), rad2deg(osc_elem(6)));

    % Convert chief mean elements to osculating
    chief_mean = [a_o*1e3; sqrt(e_x_o^2 + e_y_o^2); ...
                  deg2rad(i_o); deg2rad(RAAN_o); deg2rad(atan2d(e_y_o, e_x_o)); deg2rad(u_o - atan2d(e_y_o, e_x_o))];
    chief_osc = mean2osc(chief_mean, J2_flag);
    [a_o_osc, e_x_o_osc, e_y_o_osc, i_o_osc, RAAN_o_osc, u_o_osc] = ...
        OE2quasi_nonsing(chief_osc(1)/1e3, chief_osc(2), ...
                         rad2deg(chief_osc(3)), rad2deg(chief_osc(4)), ...
                         rad2deg(chief_osc(5)), rad2deg(chief_osc(6)));

    % Now compute ROE from osculating deputy and chief
    [d_a_osc, d_lambda_osc, d_e_x_osc, d_e_y_osc, d_i_x_osc, d_i_y_osc] = ...
        quasi_nonsing2ROE(a_o_osc, e_x_o_osc, e_y_o_osc, i_o_osc, RAAN_o_osc, u_o_osc, ...
                          a_t_osc, e_x_t_osc, e_y_t_osc, i_t_osc, RAAN_t_osc, u_t_osc);
end